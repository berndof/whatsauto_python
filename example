In this case, you can use an asyncio Event to signal when the qrCode event is received. Here's how you can modify your code to achieve this:

python

Open In Editor
Edit
Run
Copy code
import logging
import asyncio
from modules.manager import Manager
from modules.listener import SocketIOClient

logging.basicConfig(level=logging.INFO)

async def main():
    manager = Manager()
    asyncio.get_event_loop().set_debug(True)
    socket_io_client = SocketIOClient("http://localhost:21465")

    # Create an asyncio Event to signal when the qrCode event is received
    qr_code_event = asyncio.Event()

    async def callback(event, data):
        # Call the corresponding method in the Manager class
        
        if event == "qrCode":
            # Signal the qrCode event is received
            qr_code_event.set()
            # Await the rest of the start_session method
            await manager.start_session("test_session")

        # Add more event handlers as needed

    #start the manager
    await manager._set_database("dev")

    # Start the Socket.IO client with the callback function
    await socket_io_client.start(callback)

    # Keep the event loop running
    while True:
        await asyncio.sleep(1)

    # This code will be executed after the qrCode event is received
    await manager.start_session("test_session")

    # Alternatively, you can use the qr_code_event to await the rest of the start_session method
    await qr_code_event.wait()
    await manager.start_session("test_session")

if __name__ == "__main__":
    asyncio.run(main())
In this code, I created an asyncio Event called qr_code_event. When the qrCode event is received, the qr_code_event.set() method is called to signal that the event is received. Then, in the start_session method, the qr_code_event.wait() method is called to wait for the qrCode event to be received. When the qrCode event is received, the qr_code_event.set() method is called again, and the start_session method continues to execute.

This way, the start_session method will wait for the qrCode event to be received before continuing to execute.

However, you might want to consider moving the code that needs to wait for the qrCode event inside the on_session_status method, or you can even move it inside the start_session method itself, depending on your specific requirements.

Here's how you can modify the start_session method:

python

Open In Editor
Edit
Run
Copy code
async def start_session(self, session_name):
    # Check if session already exists
    # In database or in api?
    
    # Check in database
    exists_session = await self.db_client.get_whatsapp_session_by_name(session_name)

    if not exists_session: return None #raise exception?
    
    # Await the qrCode event before proceeding
    await qr_code_event.wait()
    
    # Continue with the rest of the start_session method
    
    # Add more code as needed
This way, the start_session method will wait for the qrCode event to be received before continuing to execute.




Answer 2
3
Verify