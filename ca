import asyncio
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

from modules.models import Base

class DatabaseClient:
    def __init__(self, environment: str, config: dict):
        if environment == 'dev':
            db_url = f'sqlite+aiosqlite:///database.db'
        else:
            db_url = f'postgresql+asyncpg://{config["user"]}
            raise NotImplementedError("wrong environment")
        
        self.engine = create_async_engine(db_url)
        self.Session = sessionmaker(self.engine, class_=AsyncSession, expire_on_commit=False)
        self.is_started = False

    async def create_all_tables(self):
        async with self.engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)

    async def get_session(self):
        async with self.Session() as session:
            yield session
        return

    async def start(self):
        if not self.is_started:
            await self.create_all_tables()
            self.is_started = True
        else:
            raise NotImplementedError("DatabaseClient error")
    
        return self.is_started
        